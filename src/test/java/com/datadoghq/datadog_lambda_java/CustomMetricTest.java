/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.datadoghq.datadog_lambda_java;

import org.junit.Test;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import static org.junit.Assert.*;

public class CustomMetricTest {
    @Test public void testCustomMetrics() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
        Date customTime = new Date();
        try {
            customTime = sdf.parse("2019-05-29T18:00:00Z");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        CustomMetric ddm = new CustomMetric("foo", 24.3, null, customTime);
        assertEquals("{\"m\":\"foo\",\"v\":24.3,\"t\":[],\"e\":1559152800}", ddm.toJson());
    }


    @Test public void testCustomMetricWrite(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
        Date customTime = new Date();
        try {
            customTime = sdf.parse("2019-05-29T18:00:00Z");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        CustomMetric ddm = new CustomMetric("foo", 24.3, null, customTime);

        StringMetricWriter smw = new StringMetricWriter();
        MetricWriter.setMetricWriter(smw);
        ddm.write();

        assertNotNull(smw.getMetricsWritten());
        assertEquals("{\"m\":\"foo\",\"v\":24.3,\"t\":[],\"e\":1559152800}",smw.getMetricsWritten());
    }

    @Test public void testExtensionMetricWriter() {
        Map<String, Object> map = new LinkedHashMap<>(); // to save the order to avoid flaky test
        map.put("firstTag", "firstTagValue");
        map.put("secondTag", 100.34);
        CustomMetric ddm = new CustomMetric("foo", 24.3, map);
        ExtensionMetricWriter emw = new ExtensionMetricWriter();
        MetricWriter.setMetricWriter(emw);
        final String[] text = new String[1];

        new Thread(new Runnable() {
            public void run() {
                byte[] msg = new byte[256];
                DatagramPacket dp = new DatagramPacket(msg, msg.length);
                DatagramSocket ds = null;
                try {
                    ds = new DatagramSocket(8125);
                    ds.receive(dp);
                    text[0] = new String(dp.getData());
                } catch (SocketException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (ds != null) {
                        ds.close();
                    }
                }
            }
        }).start();

        ddm.write();

        try {
            Thread.sleep(1000);
            assertTrue(text[0].startsWith("foo:24.3|d|#firsttag:firsttagvaluesecondtag:100.34"));
        } catch (InterruptedException e) {
            fail();
        }
    }

    /**
     * For tests!
     */
    class StringMetricWriter extends MetricWriter{
        private String metricsWritten;

        public String getMetricsWritten(){
            return metricsWritten;
        }

        @Override
        public void write(CustomMetric cm) {
            if (metricsWritten == null) metricsWritten = "";
            metricsWritten = metricsWritten + cm.toJson();
        }

        @Override
        public void flush() {
        }
    }

}
